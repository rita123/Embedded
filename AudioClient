package AudioDistribution;

import java.io.*;
import java.net.*;

public class AudioClient {

    public static void main(String[] args) throws IOException {
        Socket kkpSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;


        try {
            kkpSocket = new Socket("localhost", 4444);
            out = new PrintWriter(kkpSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(kkpSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: taranis.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for the connection to: taranis.");
            System.exit(1);
        }
        BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
        String fromServer;
        String fromUser;
//        while ((fromServer = in.readLine()) != null) {
//            System.out.println("Server: " + fromServer);
//            if (fromServer.equalsIgnoreCase("connection closed")) {
//                break;
//            }
//
//            fromUser = stdIn.readLine();
//            if (fromUser != null) {
//                System.out.println("Client: " + fromUser);
//                out.println(fromUser);
        while ((fromServer = in.readLine()) != null) {
            System.out.println("Server: " + fromServer);
            if (fromServer.equals("Bye.")) {
                break;
            }

            fromUser = stdIn.readLine();
            if (fromUser != null) {
                System.out.println("Client: " + fromUser);
                out.println(fromUser);
            }

        }
        out.close();
        in.close();
        stdIn.close();
        kkpSocket.close();
    }

//    protected DatagramPacket buildPacket(String message, String host, int port) throws IOException {
//
//// Create a byte array from a string
//        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
//        DataOutputStream dataOut = new DataOutputStream(byteOut);
//        dataOut.writeBytes(message);
//        byte[] data = byteOut.toByteArray();
////Return the new object with the byte array payload
//        return new DatagramPacket(data, data.length, InetAddress.getByName(host), port);
//    }

//    protected void receivePacket() throws IOException {
//
//        byte buffer[] = new byte[65535];
//        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
//        socket.receive(packet);
//// Convert the byte array read from network into a string 
//        ByteArrayInputStream byteIn = new ByteArrayInputStream(packet.getData(), 0, packet.getLength());
//        DataInputStream dataIn = new DataInputStream(byteIn);
//// Read in data from a standard format 
//        String input = "";
//        while ((input = dataIn.readLine()) != null) {
//            System.out.println("SERVER REPLIED : " + input + "\n");
//        }
//    }
    
}
//public class UDPSend {
//  public static final String usage = "Usage: java UDPSend <hostname> <port> <msg>...\n"
//      + "   or: java UDPSend <hostname> <port> -f <file>";
//
//  public static void main(String args[]) {
//    try {
//      // Check the number of arguments
//      if (args.length < 3)
//        throw new IllegalArgumentException("Wrong number of args");
//
//      // Parse the arguments
//      String host = args[0];
//      int port = Integer.parseInt(args[1]);
//
//      // Figure out the message to send.
//      // If the third argument is -f, then send the contents of the file
//      // specified as the fourth argument. Otherwise, concatenate the
//      // third and all remaining arguments and send that.
//      byte[] message;
//      if (args[2].equals("-f")) {
//        File f = new File(args[3]);
//        int len = (int) f.length(); // figure out how big the file is
//        message = new byte[len]; // create a buffer big enough
//        FileInputStream in = new FileInputStream(f);
//        int bytes_read = 0, n;
//        do { // loop until we've read it all
//          n = in.read(message, bytes_read, len - bytes_read);
//          bytes_read += n;
//        } while ((bytes_read < len) && (n != -1));
//      } else { // Otherwise, just combine all the remaining arguments.
//        String msg = args[2];
//        for (int i = 3; i < args.length; i++)
//          msg += " " + args[i];
//        // Convert the message to bytes using UTF-8 encoding
//        message = msg.getBytes("UTF-8");
//      }
//
//      // Get the internet address of the specified host
//      InetAddress address = InetAddress.getByName(host);
//
//      // Initialize a datagram packet with data and address
//      DatagramPacket packet = new DatagramPacket(message, message.length, address, port);
//
//      // Create a datagram socket, send the packet through it, close it.
//      DatagramSocket dsocket = new DatagramSocket();
//      dsocket.send(packet);
//      dsocket.close();
//    } catch (Exception e) {
//      System.err.println(e);
//      System.err.println(usage);
//    }
//  }
//}
//